name: WebAssembly

on: [push, pull_request]

concurrency: # cancel running build if new push on the same branch
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  linux:
    name: WASM(Linux)
    runs-on: ubuntu-latest
    container:
      image: emscripten/emsdk:3.1.74 # https://hub.docker.com/r/emscripten/emsdk
    steps:
      - uses: actions/checkout@v4

      - name: "Run apt"
        run: |
          sudo apt update -y
          sudo apt install -y python3 pkg-config file \
            autoconf automake autoconf-archive \
            linux-libc-dev

      - name: "Detect Node.js"
        run: |
          # "/emsdk/node/20.18.0_64bit/bin/..."
          node_path=$(which node)
          echo "Using Node.js: $node_path" >> "$GITHUB_STEP_SUMMARY"
          echo "EMSDK_NODE=$node_path" >> "$GITHUB_ENV"

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.31.0"

      - name: "Run vcpkg(wasm32-emscripten)"
        uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "/usr/local/share/vcpkg" # VCPKG_INSTALLATION_ROOT
          runVcpkgInstall: true
          vcpkgJsonGlob: "cmake/vcpkg.json"
          vcpkgConfigurationJsonGlob: "cmake/vcpkg-configuration.json"
        env:
          VCPKG_INSTALLED_DIR: "${{ github.workspace }}/.build"
          VCPKG_DEFAULT_TRIPLET: "wasm32-emscripten"

      - name: "Detect protoc"
        id: protoc-detect
        run: |
          set -e -x
          export PROTOC_DIR="$(pwd)/.build/x64-linux/tools/protobuf"
          export PATH="$PROTOC_DIR:$PATH"
          protoc --version
          echo "protoc_path=$(which protoc)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: "Run compile_schema.py"
        run: |
          set -e -x
          export FLATC_DIR="$(pwd)/.build/x64-linux/tools/flatbuffers"
          export PATH="$FLATC_DIR:$PATH"
          flatc --version
          python3 onnxruntime/core/flatbuffers/schema/compile_schema.py --flatc "$(which flatc)"
          python3 onnxruntime/lora/adapter_format/compile_schema.py --flatc "$(which flatc)"
        shell: bash

      - name: "Run build.py"
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory /__w/onnxruntime/onnxruntime
          python3 ./tools/ci_build/build.py --allow_running_as_root --compile_no_warning_as_error \
            --build_dir ./build \
            --build_wasm \
            --parallel \
            --use_vcpkg \
            --skip_submodule_sync \
            --enable_wasm_simd \
            --enable_wasm_threads \
            --path_to_protoc_exe "${{ steps.protoc-detect.outputs.protoc_path }}" \
            --cmake_extra_defines "CMAKE_TOOLCHAIN_FILE:FILEPATH=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            --cmake_extra_defines "VCPKG_TARGET_TRIPLET=wasm32-emscripten" \
            --cmake_extra_defines "VCPKG_INSTALLED_DIR:PATH=${{ github.workspace }}/.build"
        shell: bash
        env:
          VCPKG_INSTALLATION_ROOT: "/usr/local/share/vcpkg"
